!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("@angular/core"),require("@angular/forms"),require("@angular/common/http"),require("@angular/material/form-field"),require("@angular/material/select"),require("@angular/material/input"),require("@angular/material/button")):"function"==typeof define&&define.amd?define("reloadtool",["exports","@angular/core","@angular/forms","@angular/common/http","@angular/material/form-field","@angular/material/select","@angular/material/input","@angular/material/button"],t):t((e=e||self).reloadtool={},e.ng.core,e.ng.forms,e.ng.common.http,e.ng.material["form-field"],e.ng.material.select,e.ng.material.input,e.ng.material.button)}(this,(function(e,t,o,r,n,a,l,i){"use strict";
/*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */function u(e,t,o,r){var n,a=arguments.length,l=a<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,o):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)l=Reflect.decorate(e,t,o,r);else for(var i=e.length-1;i>=0;i--)(n=e[i])&&(l=(a<3?n(l):a>3?n(t,o,l):n(t,o))||l);return a>3&&l&&Object.defineProperty(t,o,l),l}var s=function(){function e(){}return e.ɵprov=t["ɵɵdefineInjectable"]({factory:function(){return new e},token:e,providedIn:"root"}),e=u([t.Injectable({providedIn:"root"})],e)}(),m=function(){function e(e,r){this.formBuilder=e,this.http=r,this.requestResultChange=new t.EventEmitter,this.requestResult="",this.reloadForm=this.formBuilder.group({entity:["",o.Validators.required],cobdate:["",o.Validators.required]})}return e.prototype.ngOnInit=function(){},e.prototype.onSubmit=function(){var e=this,t=this;this.reloadForm.valid&&this.http.post("/sod",this.reloadForm.value).subscribe((function(e){console.log("Received response"),t.requestResult="Reload initiated",t.requestResultChange.emit(t.requestResult)}),(function(t){var o="";o=t.error instanceof ErrorEvent?"An error occurred:"+t.error.message:"Backend returned code "+t.status+", body was: "+t.error,console.error(o),e.requestResult=o,e.requestResultChange.emit(e.requestResult)}))},e.ctorParameters=function(){return[{type:o.FormBuilder},{type:r.HttpClient}]},u([t.Output()],e.prototype,"requestResultChange",void 0),e=u([t.Component({selector:"lib-reloadtool",template:'\n    <form [formGroup]="reloadForm">\n    <div class="row">\n      <div class="column2">\n        <div class="example-container">\n          <br>\n          <mat-form-field appearance="fill">\n            <mat-label>Entity</mat-label>\n            <mat-select formControlName="entity">\n              <mat-option value="RISK">Risks</mat-option>\n              <mat-option value="CURVE_DEFINITION">Curve definitions</mat-option>\n              <mat-option value="TRADE">Trades</mat-option>\n              <mat-option value="CURVE_INST_PRICE">Matd tenor mappings</mat-option>\n              <mat-option value="JTD_WEIGHT">JTD weights</mat-option>\n              <mat-option value="DURATION_WEIGHT">Duration weights</mat-option>\n            </mat-select>\n          </mat-form-field>\n          <br>\n          <mat-form-field appearance="fill">\n            <mat-label>Date</mat-label>\n            <input matInput formControlName="cobdate">\n          </mat-form-field>\n          <br>\n          <button mat-stroked-button color="primary"\n                  color="primary"\n                  (click)="onSubmit()">Reload</button>\n        </div>\n      </div>\n      <div class="column7">\n        <br>\n        {{requestResult}}\n      </div>\n    </div>\n    </form>\n  ',styles:['.column2{float:left;width:20%}.column7{float:left;width:70%}.row:after{content:"";display:table;clear:both}']})],e)}(),d=function(){function e(){}return e=u([t.NgModule({declarations:[m],imports:[n.MatFormFieldModule,o.FormsModule,o.ReactiveFormsModule,a.MatSelectModule,l.MatInputModule,i.MatButtonModule,r.HttpClientModule],exports:[m]})],e)}();e.ReloadtoolComponent=m,e.ReloadtoolModule=d,e.ReloadtoolService=s,Object.defineProperty(e,"__esModule",{value:!0})}));
//# sourceMappingURL=reloadtool.umd.min.js.map