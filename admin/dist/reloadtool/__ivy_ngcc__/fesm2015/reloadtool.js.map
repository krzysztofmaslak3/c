{"version":3,"sources":["D:/workspace/citi/rtcadmin/admin/dist/reloadtool/fesm2015/reloadtool.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;AASA;;;;0GAGE;kLACgL,AAK5J;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ueAwCpB;;;;;;;iEAO+D,AAyCzC;;;;;;;;;;;;;EAGtB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;0BAemB","file":"reloadtool.js","sourcesContent":["import { __decorate } from 'tslib';\nimport { ɵɵdefineInjectable, Injectable, EventEmitter, Output, Component, NgModule } from '@angular/core';\nimport { Validators, FormBuilder, FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { HttpClient, HttpClientModule } from '@angular/common/http';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatButtonModule } from '@angular/material/button';\n\nlet ReloadtoolService = class ReloadtoolService {\r\n    constructor() {\r\n    }\r\n};\r\nReloadtoolService.ɵprov = ɵɵdefineInjectable({ factory: function ReloadtoolService_Factory() { return new ReloadtoolService(); }, token: ReloadtoolService, providedIn: \"root\" });\r\nReloadtoolService = __decorate([\r\n    Injectable({\r\n        providedIn: 'root'\r\n    })\r\n], ReloadtoolService);\n\nlet ReloadtoolComponent = class ReloadtoolComponent {\r\n    constructor(formBuilder, http) {\r\n        this.formBuilder = formBuilder;\r\n        this.http = http;\r\n        this.requestResultChange = new EventEmitter();\r\n        this.requestResult = '';\r\n        this.reloadForm = this.formBuilder.group({\r\n            entity: ['', Validators.required],\r\n            cobdate: ['', Validators.required]\r\n        });\r\n    }\r\n    ngOnInit() {\r\n    }\r\n    onSubmit() {\r\n        let self = this;\r\n        if (this.reloadForm.valid) {\r\n            this.http.post('/sod', this.reloadForm.value)\r\n                .subscribe((response) => {\r\n                console.log('Received response');\r\n                self.requestResult = 'Reload initiated';\r\n                self.requestResultChange.emit(self.requestResult);\r\n            }, (error) => {\r\n                let error_message = '';\r\n                if (error.error instanceof ErrorEvent) {\r\n                    // A client-side or network error occurred. Handle it accordingly.\r\n                    error_message = 'An error occurred:' + error.error.message;\r\n                }\r\n                else {\r\n                    // The backend returned an unsuccessful response code.\r\n                    // The response body may contain clues as to what went wrong,\r\n                    error_message = 'Backend returned code ' + error.status + ', body was: ' + error.error;\r\n                }\r\n                console.error(error_message);\r\n                this.requestResult = error_message;\r\n                this.requestResultChange.emit(this.requestResult);\r\n            });\r\n        }\r\n    }\r\n};\r\nReloadtoolComponent.ctorParameters = () => [\r\n    { type: FormBuilder },\r\n    { type: HttpClient }\r\n];\r\n__decorate([\r\n    Output()\r\n], ReloadtoolComponent.prototype, \"requestResultChange\", void 0);\r\nReloadtoolComponent = __decorate([\r\n    Component({\r\n        selector: 'lib-reloadtool',\r\n        template: `\n    <form [formGroup]=\"reloadForm\">\n    <div class=\"row\">\n      <div class=\"column2\">\n        <div class=\"example-container\">\n          <br>\n          <mat-form-field appearance=\"fill\">\n            <mat-label>Entity</mat-label>\n            <mat-select formControlName=\"entity\">\n              <mat-option value=\"RISK\">Risks</mat-option>\n              <mat-option value=\"CURVE_DEFINITION\">Curve definitions</mat-option>\n              <mat-option value=\"TRADE\">Trades</mat-option>\n              <mat-option value=\"CURVE_INST_PRICE\">Matd tenor mappings</mat-option>\n              <mat-option value=\"JTD_WEIGHT\">JTD weights</mat-option>\n              <mat-option value=\"DURATION_WEIGHT\">Duration weights</mat-option>\n            </mat-select>\n          </mat-form-field>\n          <br>\n          <mat-form-field appearance=\"fill\">\n            <mat-label>Date</mat-label>\n            <input matInput formControlName=\"cobdate\">\n          </mat-form-field>\n          <br>\n          <button mat-stroked-button color=\"primary\"\n                  color=\"primary\"\n                  (click)=\"onSubmit()\">Reload</button>\n        </div>\n      </div>\n      <div class=\"column7\">\n        <br>\n        {{requestResult}}\n      </div>\n    </div>\n    </form>\n  `,\r\n        styles: [\".column2{float:left;width:20%}.column7{float:left;width:70%}.row:after{content:\\\"\\\";display:table;clear:both}\"]\r\n    })\r\n], ReloadtoolComponent);\n\nlet ReloadtoolModule = class ReloadtoolModule {\r\n};\r\nReloadtoolModule = __decorate([\r\n    NgModule({\r\n        declarations: [ReloadtoolComponent],\r\n        imports: [\r\n            MatFormFieldModule,\r\n            FormsModule,\r\n            ReactiveFormsModule,\r\n            MatSelectModule,\r\n            MatInputModule,\r\n            MatButtonModule,\r\n            HttpClientModule\r\n        ],\r\n        exports: [ReloadtoolComponent]\r\n    })\r\n], ReloadtoolModule);\n\n/*\r\n * Public API Surface of reloadtool\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { ReloadtoolComponent, ReloadtoolModule, ReloadtoolService };\n"]}