{"version":3,"sources":["D:/workspace/citi/rtcadmin/admin/dist/s3search/fesm2015/s3search.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAUA;;;;oGAGE;0KACwK,AAKtJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;itBAiDlB;;;;;;;+DAO6D,AA2DzC;;;;;;;;;;;;;;EAGpB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;0BAgBiB","file":"s3search.js","sourcesContent":["import { __decorate } from 'tslib';\nimport { ɵɵdefineInjectable, Injectable, EventEmitter, Output, Component, NgModule } from '@angular/core';\nimport { Validators, FormBuilder, FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { HttpClient, HttpClientModule } from '@angular/common/http';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatTableModule } from '@angular/material/table';\n\nlet S3searchService = class S3searchService {\r\n    constructor() {\r\n    }\r\n};\r\nS3searchService.ɵprov = ɵɵdefineInjectable({ factory: function S3searchService_Factory() { return new S3searchService(); }, token: S3searchService, providedIn: \"root\" });\r\nS3searchService = __decorate([\r\n    Injectable({\r\n        providedIn: 'root'\r\n    })\r\n], S3searchService);\n\nlet S3searchComponent = class S3searchComponent {\r\n    constructor(formBuilder, http) {\r\n        this.formBuilder = formBuilder;\r\n        this.http = http;\r\n        this.displayedColumns = ['Text'];\r\n        this.dataSource = [];\r\n        this.requestResultChange = new EventEmitter();\r\n        this.requestResult = '';\r\n        this.startKey = '';\r\n        this.keyStartIndex = 0;\r\n        this.s3searchForm = this.formBuilder.group({\r\n            queryText: ['', Validators.required],\r\n            region: ['', Validators.required],\r\n            pod: [''],\r\n            date: [''],\r\n            startKey: [this.startKey],\r\n            keyStartIndex: [this.keyStartIndex]\r\n        });\r\n    }\r\n    ngOnInit() {\r\n    }\r\n    onSubmit() {\r\n        let self = this;\r\n        if (this.s3searchForm.valid) {\r\n            this.http.post('/s3', this.s3searchForm.value)\r\n                .subscribe((searchResult) => {\r\n                console.log('Received response');\r\n                self.requestResult = 'Search completed';\r\n                self.dataSource = searchResult.lines;\r\n                self.requestResultChange.emit(self.requestResult);\r\n            }, (error) => {\r\n                let error_message = '';\r\n                if (error.error instanceof ErrorEvent) {\r\n                    // A client-side or network error occurred. Handle it accordingly.\r\n                    error_message = 'An error occurred:' + error.error.message;\r\n                }\r\n                else {\r\n                    // The backend returned an unsuccessful response code.\r\n                    // The response body may contain clues as to what went wrong,\r\n                    error_message = 'Backend returned code ' + error.status + ', body was: ' + error.error;\r\n                }\r\n                console.error(error_message);\r\n                this.requestResult = error_message;\r\n                this.requestResultChange.emit(this.requestResult);\r\n            });\r\n        }\r\n    }\r\n};\r\nS3searchComponent.ctorParameters = () => [\r\n    { type: FormBuilder },\r\n    { type: HttpClient }\r\n];\r\n__decorate([\r\n    Output()\r\n], S3searchComponent.prototype, \"requestResultChange\", void 0);\r\nS3searchComponent = __decorate([\r\n    Component({\r\n        selector: 'lib-s3search',\r\n        template: `\n    <form [formGroup]=\"s3searchForm\">\n    <div class=\"row\">\n      <div class=\"column2\">\n        <div class=\"example-container\">\n          <br>\n          <mat-form-field appearance=\"fill\">\n            <mat-label>Queried text</mat-label>\n            <input matInput formControlName=\"queryText\">\n          </mat-form-field>\n          <br>\n          <mat-form-field appearance=\"fill\">\n            <mat-label>Region</mat-label>\n            <mat-select formControlName=\"region\">\n              <mat-option value=\"EMEA\">EMEA</mat-option>\n              <mat-option value=\"APAC\">APAC</mat-option>\n              <mat-option value=\"NAM\">NAM</mat-option>\n            </mat-select>\n          </mat-form-field>\n          <br>\n          <mat-form-field appearance=\"fill\">\n            <mat-label>POD</mat-label>\n            <input matInput formControlName=\"pod\">\n          </mat-form-field>\n          <br>\n          <mat-form-field appearance=\"fill\">\n            <mat-label>Date</mat-label>\n            <input matInput formControlName=\"date\">\n          </mat-form-field>\n          <br>\n          <button mat-stroked-button color=\"primary\"\n                  color=\"primary\"\n                  (click)=\"onSubmit()\">Reload</button>\n        </div>\n      </div>\n      <div class=\"column7\">\n        <br>\n        {{requestResult}}\n        <br>\n        <table mat-table [dataSource]=\"dataSource\" class=\"mat-elevation-z8\">\n          <ng-container matColumnDef=\"text\">\n            <th mat-header-cell *matHeaderCellDef>Text</th>\n            <td mat-cell *matCellDef=\"let element\"> {{element}} </td>\n          </ng-container>\n\n\n          <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n          <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n        </table>\n      </div>\n    </div>\n    </form>\n  `,\r\n        styles: [\".column2{float:left;width:20%}.column7{float:left;width:70%}.row:after{content:\\\"\\\";display:table;clear:both}table{width:100%}\"]\r\n    })\r\n], S3searchComponent);\n\nlet S3searchModule = class S3searchModule {\r\n};\r\nS3searchModule = __decorate([\r\n    NgModule({\r\n        declarations: [S3searchComponent],\r\n        imports: [\r\n            MatFormFieldModule,\r\n            FormsModule,\r\n            ReactiveFormsModule,\r\n            MatSelectModule,\r\n            MatInputModule,\r\n            MatButtonModule,\r\n            HttpClientModule,\r\n            MatTableModule\r\n        ],\r\n        exports: [S3searchComponent]\r\n    })\r\n], S3searchModule);\n\n/*\r\n * Public API Surface of s3search\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { S3searchComponent, S3searchModule, S3searchService };\n"]}