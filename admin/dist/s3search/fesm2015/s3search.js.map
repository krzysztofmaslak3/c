{"version":3,"file":"s3search.js","sources":["ng://s3search/lib/s3search.service.ts","ng://s3search/lib/s3search.component.ts","ng://s3search/lib/s3search.module.ts","ng://s3search/public-api.ts","ng://s3search/s3search.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class S3searchService {\n\n  constructor() { }\n}\n","import { Component, OnInit, EventEmitter, Output } from '@angular/core';\nimport { FormControl, FormBuilder, Validators } from '@angular/forms';\nimport { HttpClient, HttpErrorResponse, HttpResponse } from '@angular/common/http';\nimport { SearchResult } from './s3search-result'\n\n@Component({\n  selector: 'lib-s3search',\n  styleUrls: ['./s3search.component.css'],\n  template: `\n    <form [formGroup]=\"s3searchForm\">\n    <div class=\"row\">\n      <div class=\"column2\">\n        <div class=\"example-container\">\n          <br>\n          <mat-form-field appearance=\"fill\">\n            <mat-label>Queried text</mat-label>\n            <input matInput formControlName=\"queryText\">\n          </mat-form-field>\n          <br>\n          <mat-form-field appearance=\"fill\">\n            <mat-label>Region</mat-label>\n            <mat-select formControlName=\"region\">\n              <mat-option value=\"EMEA\">EMEA</mat-option>\n              <mat-option value=\"APAC\">APAC</mat-option>\n              <mat-option value=\"NAM\">NAM</mat-option>\n            </mat-select>\n          </mat-form-field>\n          <br>\n          <mat-form-field appearance=\"fill\">\n            <mat-label>POD</mat-label>\n            <input matInput formControlName=\"pod\">\n          </mat-form-field>\n          <br>\n          <mat-form-field appearance=\"fill\">\n            <mat-label>Date</mat-label>\n            <input matInput formControlName=\"date\">\n          </mat-form-field>\n          <br>\n          <button mat-stroked-button color=\"primary\"\n                  color=\"primary\"\n                  (click)=\"onSubmit()\">Reload</button>\n        </div>\n      </div>\n      <div class=\"column7\">\n        <br>\n        {{requestResult}}\n        <br>\n        <table mat-table [dataSource]=\"dataSource\" class=\"mat-elevation-z8\">\n          <ng-container matColumnDef=\"text\">\n            <th mat-header-cell *matHeaderCellDef>Text</th>\n            <td mat-cell *matCellDef=\"let element\"> {{element}} </td>\n          </ng-container>\n\n\n          <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n          <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n        </table>\n      </div>\n    </div>\n    </form>\n  `,\n  styles: []\n})\nexport class S3searchComponent implements OnInit {\n  constructor(private formBuilder: FormBuilder, private http: HttpClient) { }\n\n  displayedColumns: string[] = ['Text'];\n\n  dataSource: string[] = []\n\n  @Output() requestResultChange = new EventEmitter();\n  requestResult = '';\n\n  startKey = ''\n\n  keyStartIndex = 0\n\n  s3searchForm = this.formBuilder.group({\n      queryText: ['', Validators.required],\n      region: ['', Validators.required],\n      pod: [''],\n      date: [''],\n      startKey: [this.startKey],\n      keyStartIndex: [this.keyStartIndex]\n    });\n\n  ngOnInit(): void {\n  }\n\n  onSubmit() {\n    let self = this;\n    if(this.s3searchForm.valid){\n        this.http.post<SearchResult>('/s3', this.s3searchForm.value)\n        .subscribe((searchResult: SearchResult)=>{\n          console.log('Received response');\n          self.requestResult = 'Search completed';\n          self.dataSource = searchResult.lines;\n          self.requestResultChange.emit(self.requestResult);\n        }, (error: HttpErrorResponse) => {\n           let error_message = ''\n           if (error.error instanceof ErrorEvent) {\n             // A client-side or network error occurred. Handle it accordingly.\n             error_message = 'An error occurred:'+error.error.message;\n           } else {\n             // The backend returned an unsuccessful response code.\n             // The response body may contain clues as to what went wrong,\n             error_message = 'Backend returned code '+error.status+', body was: '+error.error;\n           }\n           console.error(error_message);\n           this.requestResult = error_message;\n           this.requestResultChange.emit(this.requestResult);\n        })\n    }\n  }\n}\n","import { S3searchComponent } from './s3search.component';\nimport { NgModule } from '@angular/core';\nimport { MatFormFieldModule } from '@angular/material/form-field'\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatButtonModule } from '@angular/material/button';\nimport { HttpClientModule } from '@angular/common/http';\nimport { MatTableModule } from '@angular/material/table';\n\n@NgModule({\n  declarations: [S3searchComponent],\n  imports: [\n    MatFormFieldModule,\n    FormsModule,\n    ReactiveFormsModule,\n    MatSelectModule,\n    MatInputModule,\n    MatButtonModule,\n    HttpClientModule,\n    MatTableModule\n  ],\n  exports: [S3searchComponent]\n})\nexport class S3searchModule { }\n","/*\n * Public API Surface of s3search\n */\n\nexport * from './lib/s3search.service';\nexport * from './lib/s3search.component';\nexport * from './lib/s3search.module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}